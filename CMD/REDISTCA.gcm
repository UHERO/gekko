// *************************
// REDISTRIBUTION OF EXCESS E_ELSE AFTER COUNTY ALLOCATION
// AUTHOR: PETER FULEKY
// DATE: 2020-06-14
// NOTES:
// RUN THE WHOLE SCRIPT FROM THE COMMAND LINE USING RUN REDISTCA.GCM;
// OR CALL IT FROM THE MAIN COUNTY ALLOCATION FILE
// THIS IS THE SECOND STAGE TRIGGERED BY THE REDISTRIBUTE SWITCH IN THE MAIN FILE 
// 	1. CONSTRUCT EQUATIONS
// 	2. REDISTRIBUTE RESIDUAL
// *************************




// STAGE 2. REDISTRIBUTE RESIDUAL
// REDISTRIBUTION OF EXCESS RESIDUALS (E_ELSE) INTO EACH INDUSTRY IN EACH COUNTY.
// IF (%REDISTRIBUTE=='Y');

// UPDATE ADDFACTORS AFTER THE FIRST SIMULATION
MODE SIM;


TELL '*************************';
TELL ' REDISTRIBUTION OF EXCESS E_ELSE';
TELL '*************************';


// COEFF FOR FRACTIONAL ADJUSTMENT
// REDISTRIBUTION OF THE FULL DIFFERENCE (1.0) CAN PUSH OTHER SERIES TOO FAR
%FRAC_ADJ = 0.6

// THE COEFFICIENTS BELOW ARE THE GROWTH DIFFERENTIALS BETWEEN E_ELSE_CNTY AND E_ELSE_NBI IN HIST+1
FOR STRING %CNTY_I = HAW, KAU, MAU;
%LAST_PER = FROMSERIES(@E_ELSE_{%CNTY_I}, 'DATAEND');
%{%CNTY_I}_BALANC = %FRAC_ADJ * (PCH(E_ELSE_{%CNTY_I})[%LAST_PER+1] - PCH(E_ELSE_NBI)[%LAST_PER+1])/100; //  0.0911*0.6;
END; // END FOR LOOP  

// SERIES TO REDISTRIBUTE OVER
#SERLIST = CT, MN, _TRADE, _TU, _FIR, AF, HC, GVFD, _GVSL;

// INITIALIZE SUM OF ABSOLUTE CHANGES
%CHGSUM =  0;
// FOR EACH SECTOR ABSOLUTE NBI CHANGES IN FIRST YEAR OF FORECAST
FOR STRING %SER_I = #SERLIST;
%E{%SER_I}_CHG = ABS(DIF(E{%SER_I}_NBI)[%LAST_PER+1]);
// ADD UP ABSOLUTE CHANGES
%CHGSUM += %E{%SER_I}_CHG;
END; // END FOR LOOP  

// THE REDISTRIBUTION PERIOD STARTS #LAST_PER+1, ENDS #LAST_PER+#REAL_END
%REAL_END = 30;

// LOOP OVER ALL INDUSTRIES
FOR STRING %SER_I = #SERLIST;


// LOOP OVER ALL COUNTIES
FOR STRING %CNTY_I = HAW, KAU, MAU;
// %CNTY_I = 'HAW';


// GET THE LAST PERIOD IN HISTORY (MAKE SURE THE HISTORY IS IN THE REF BANK)
%LAST_PER = FROMSERIES(@E{%SER_I}_{%CNTY_I}, 'DATAEND');

// CREATE TEMPORARY VARIABLES
CREATE E{%SER_I}_{%CNTY_I}_RE, RE_VAL_SER;

// CALCULATE THE AMOUNT TO BE REDISTRIBUTED
E{%SER_I}_{%CNTY_I}_RE <%LAST_PER %LAST_PER> = %{%CNTY_I}_BALANC*E_ELSE_{%CNTY_I} * %E{%SER_I}_CHG/%CHGSUM;

// GET THE DIFFERENCE IN THE LAST AVAILABLE YEAR
%RE_VAL = E{%SER_I}_{%CNTY_I}_RE[%LAST_PER];

// CREATE ADDFACTOR SERIES FOR REDISTRIBUTION
RE_VAL_SER <%LAST_PER+1 %LAST_PER+2> = (%RE_VAL, %RE_VAL/3);
// RE_VAL_SER <%LAST_PER+1 %LAST_PER+2> = ({%RE_VAL}, {%RE_VAL}/3);
// RE_VAL_SER <%LAST_PER+1 %LAST_PER+%REAL_END> = %RE_VAL REP *;
// RE_VAL_SER <%LAST_PER+1 %LAST_PER+1> = %RE_VAL;
RE_VAL_SER <%LAST_PER+%REAL_END %LAST_PER+%REAL_END> = 0;
SMOOTH RE_VAL_SER = RE_VAL_SER LINEAR;

// UPDATE ADDFACTOR WITH REDISTRIBUTION
// E{%SER_I}_{%CNTY_I}_ADD <%LAST_PER+1 %LAST_PER+%REAL_END> = E{%SER_I}_{%CNTY_I}_ADD + (RE_VAL_SER);
JDE{%SER_I}_{%CNTY_I} <%LAST_PER+1 %LAST_PER+%REAL_END> = RE_VAL_SER;

// DELETE TERMPORARY VARIABLES
DELETE E{%SER_I}_{%CNTY_I}_RE, %RE_VAL, RE_VAL_SER;

END; // END FOR LOOP  


END; // END FOR LOOP  


TELL '*************************';
TELL ' END OF REDISTRIBUTION   ';
TELL '*************************';


// END; // END IF
