// *************************
// REDISTRIBUTION OF EXCESS E_ELSE AFTER COUNTY ALLOCATION
// AUTHOR: PETER FULEKY
// DATE: 2020-06-14
// NOTES:
// RUN THE WHOLE SCRIPT FROM THE COMMAND LINE USING RUN REDISTCA.GCM;
// OR CALL IT FROM THE MAIN COUNTY ALLOCATION FILE
// THIS IS THE SECOND STAGE TRIGGERED BY THE REDISTRIBUTE SWITCH IN THE MAIN FILE 
// 	1. CONSTRUCT EQUATIONS
// 	2. REDISTRIBUTE RESIDUAL
// *************************




// STAGE 2. REDISTRIBUTE RESIDUAL
// REDISTRIBUTION OF EXCESS RESIDUALS (E_ELSE) INTO EACH INDUSTRY IN EACH COUNTY.
// IF (%REDISTRIBUTE=='Y');

// UPDATE ADDFACTORS AFTER THE FIRST SIMULATION
MODE SIM;


TELL '*************************';
TELL ' REDISTRIBUTION OF EXCESS E_ELSE';
TELL '*************************';



// OPEN CASOL, ASOLX, QSOLX;
// PRINT <2016 2022> PCH(E_ELSE_NBI.A), PCH(E_ELSE_MAU.SOLA), PCH(E_ELSE_HAW.SOLA), PCH(E_ELSE_KAU.SOLA);
// PRINT <2016 2022> PCH(E_ELSE_NBI.A), (PCH(E_ELSE_MAU.SOLA))-(PCH(E_ELSE_NBI.A)), (PCH(E_ELSE_HAW.SOLA))-(PCH(E_ELSE_NBI.A)), (PCH(E_ELSE_KAU.SOLA))-(PCH(E_ELSE_NBI.A));
// PRINT <2016 2022> E_ELSE_MAU.SOLA/E_NF_MAU.A, E_ELSE_HAW.SOLA/E_NF_HAW.A, E_ELSE_KAU.SOLA/E_NF_KAU.A;
// ASSIGN SECTOR LITERAL 'MN';
// PRINT <2018 2022> DIFF(E#SECTOR|_NBI.A),  DIFF(E#SECTOR|_MAU.SOLA),  DIFF(E#SECTOR|_HAW.SOLA),  DIFF(E#SECTOR|_KAU.SOLA);
// PRINT <2018 2022> PCH(E#SECTOR|_NBI.A),  E#SECTOR|_MAU.SOLA%,  E#SECTOR|_HAW.SOLA%,  E#SECTOR|_KAU.SOLA%;
// PRINT <2018 2022> E#SECTOR|_NBI.A, E#SECTOR|_HAW.SOLA + E#SECTOR|_MAU.SOLA + E#SECTOR|_KAU.SOLA;
// CLOSE *;

//                          PCH(E_EL  PCH(E_EL  PCH(E_EL  PCH(E_EL
//                          SE_NBI.A  SE_MAU.S  SE_HAW.S  SE_KAU.S
//                             )        OLA)      OLA)      OLA)
// 
// 
//                  2018        1.09      0.32     -1.31      3.95
//                  2019       -4.34     -4.78     -1.80     -0.28
//                  2020       -6.36      5.21    -22.05     -1.79
//                  2021        3.87     -3.88     19.92      0.18
//                  2022        1.06     -0.19      2.70      0.87
//  
//                          PCH(E_EL  PCH(E_EL  PCH(E_EL  PCH(E_EL
//                          SE_NBI.A  SE_NBI.A  SE_NBI.A  SE_NBI.A
//                             )      )-(PCH(E  )-(PCH(E  )-(PCH(E
//                                    _ELSE_MA  _ELSE_HA  _ELSE_KA
//                                    U.SOLA))  W.SOLA))  U.SOLA))
// 
// 
//                  2018        1.09      0.77      2.41     -2.85
//                  2019       -4.34      0.44     -2.54     -4.06
//                  2020       -6.36    -11.57     15.68     -4.57
//                  2021        3.87      7.75    -16.05      3.69
//                  2022        1.06      1.25     -1.64      0.19



// THE COEFFICIENTS BELOW ARE THE GROWTH DIFFERENTIALS BETWEEN E_ELSE_CNTY AND E_ELSE_NBI IN HIST+1
// ASSIGN MAU_BALANC VALUE  0.0889;
// ASSIGN HAW_BALANC VALUE -0.1207;
// ASSIGN KAU_BALANC VALUE  0.0375;
// 
// ! SERIES TO REDISTRIBUTE OVER
// LIST SERLIST = ECT, EMN, E_TRADE, E_TU, E_FIR, EAF, EHC, EGVFD, E_GVSL;
// ! FOR EACH SECTOR ABSOLUTE NBI CHANGES IN FIRST YEAR OF FORECAST
// LIST SERCHG  = 0.86, 0.43, 9.11, 1.44, 0.29, 18.44, 1.16, 0.27, 0.14;
// ! SUM OF CHANGES: 30.73
// ASSIGN CHGSUM VALUE  32.14;

// THE COEFFICIENTS BELOW ARE THE GROWTH DIFFERENTIALS BETWEEN E_ELSE_CNTY AND E_ELSE_NBI IN HIST+1
%MAU_BALANC =  0.0911*0.6;
%HAW_BALANC = -0.1224*0.6;
%KAU_BALANC =  0.0400*0.6;

// SERIES TO REDISTRIBUTE OVER
#SERLIST = CT, MN, _TRADE, _TU, _FIR, AF, HC, GVFD, _GVSL;
// FOR EACH SECTOR ABSOLUTE NBI CHANGES IN FIRST YEAR OF FORECAST
#SERCHG  = 0.86, 0.48, 9.25, 1.56, 0.31, 18.90, 1.17, 0.14, 0.14;
// SUM OF CHANGES SERCHG
%CHGSUM =  32.81;

// THE REDISTRIBUTION PERIOD STARTS #LAST_PER+1, ENDS #LAST_PER+#REAL_END
%REAL_END = 30;

// LOOP OVER ALL INDUSTRIES
FOR STRING %SER_I = #SERLIST VAL %CHG_I = #SERCHG;


// LOOP OVER ALL COUNTIES
FOR STRING %CNTY_I = HAW, KAU, MAU;
// %CNTY_I = 'HAW';


// GET THE LAST PERIOD IN HISTORY (MAKE SURE THE HISTORY IS IN THE REF BANK)
%LAST_PER = FROMSERIES(@E{%SER_I}_{%CNTY_I}, 'DATAEND');

// CREATE TEMPORARY VARIABLES
CREATE E{%SER_I}_{%CNTY_I}_RE, RE_VAL_SER;

// CALCULATE THE AMOUNT TO BE REDISTRIBUTED
E{%SER_I}_{%CNTY_I}_RE <%LAST_PER %LAST_PER> = %{%CNTY_I}_BALANC*E_ELSE_{%CNTY_I} * %CHG_I/%CHGSUM;

// GET THE DIFFERENCE IN THE LAST AVAILABLE YEAR
%RE_VAL = E{%SER_I}_{%CNTY_I}_RE[%LAST_PER];

// CREATE ADDFACTOR SERIES FOR REDISTRIBUTION
RE_VAL_SER <%LAST_PER+1 %LAST_PER+2> = (%RE_VAL, %RE_VAL/3);
// RE_VAL_SER <%LAST_PER+1 %LAST_PER+2> = ({%RE_VAL}, {%RE_VAL}/3);
// RE_VAL_SER <%LAST_PER+1 %LAST_PER+%REAL_END> = %RE_VAL REP *;
// RE_VAL_SER <%LAST_PER+1 %LAST_PER+1> = %RE_VAL;
RE_VAL_SER <%LAST_PER+%REAL_END %LAST_PER+%REAL_END> = 0;
SMOOTH RE_VAL_SER = RE_VAL_SER LINEAR;

// UPDATE ADDFACTOR WITH REDISTRIBUTION
// E{%SER_I}_{%CNTY_I}_ADD <%LAST_PER+1 %LAST_PER+%REAL_END> = E{%SER_I}_{%CNTY_I}_ADD + (RE_VAL_SER);
JDE{%SER_I}_{%CNTY_I} <%LAST_PER+1 %LAST_PER+%REAL_END> = RE_VAL_SER;

// DELETE TERMPORARY VARIABLES
DELETE E{%SER_I}_{%CNTY_I}_RE, %RE_VAL, RE_VAL_SER;

END; // END FOR LOOP  


END; // END FOR LOOP  


TELL '*************************';
TELL ' END OF REDISTRIBUTION   ';
TELL '*************************';


// END; // END IF



