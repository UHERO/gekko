// *************************
// EXPLORE SCENARIOS/SIMULATIONS
// AUTHOR: PETER FULEKY
// DATE: 2020-06-18
// NOTES:
// WE HAD SR AND LR SCENARIOS IN 2020 AND BELOW WE EXPLORED WAYS TO PRESENT THE DATA TO HECO
// ONE OPTION WAS TO COMBINE THE SR AND LR, BUT THE DISCREPANCIES WERE LARGE
// SO ENDED UP ONLY SENDING THE LR
// *************************




TELL '*************************';
TELL ' DATA WRANGLING          ';
TELL '*************************';

// CLOSE BANKS AND CLEAR MEMORY AND SCREEN (RUN GEKKO.INI)
RESTART;

%BNK_START = 1975;
TIME %BNK_START %BNK_END;

// LOAD DATA EXPORTED FROM AREMOS (SR THROUGH 2025 ONLY)
IMPORT <1975 2030 SHEET='HIGH_25' XLSX COLS> '\DAT\HILO_HECO20.XLSX' TO HIGH_25;
IMPORT <1975 2030 SHEET='LOW_25' XLSX COLS> '\DAT\HILO_HECO20.XLSX' TO LOW_25;
IMPORT <1975 2050 SHEET='BASE' XLSX COLS> '\DAT\HILO_HECO20.XLSX' TO BASE;
IMPORT <1975 2050 SHEET='LOW' XLSX COLS> '\DAT\HILO_HECO20.XLSX' TO LOW;
IMPORT <1975 2050 SHEET='HIGH' XLSX COLS> '\DAT\HILO_HECO20.XLSX' TO HIGH;

// LIST OF SERIES
#HILO_LIST = YL_R_HI, YL_R_HON, YL_R_HAW, YL_R_MAU, YL_R_KAU, Y_R_HI, Y_R_HON, Y_R_HAW, Y_R_MAU, Y_R_KAU, YL_HI, YL_HON, YL_HAW, YL_MAU, YL_KAU, Y_HI, Y_HON,Y_HAW,Y_MAU,Y_KAU,E_NF_HI,E_NF_HON, E_NF_HAW, E_NF_MAU, E_NF_KAU, NR_HI, NR_HON, NR_HAW, NR_MAU, NR_KAU, VIS_HI, VIS_HON, VIS_HAW, VIS_MAU, VIS_KAU, CPI_HON;

// COMBINE SCENARIOS WITH SIMULATIONS
// ATTEMPT TO COMBINE SR AND LR
FOR STRING %SER_I = #HILO_LIST;

{%SER_I}_HR <%BNK_START 2025> = HIGH_25:{%SER_I}_HIGHA25 / BASE:{%SER_I}_SOLA;
{%SER_I}_HR <2050 2050> = HIGH:{%SER_I}_HIGHA / BASE:{%SER_I}_SOLA;
{%SER_I}_HR <2026 2026> ^= 0;
{%SER_I}_HR <2027 2049> = M();
SMOOTH {%SER_I}_HR = {%SER_I}_HR SPLINE;
{%SER_I}_HL <%BNK_START 2050> = {%SER_I}_HR * BASE:{%SER_I}_SOLA;

// USE JUST LR INSTEAD
{%SER_I}_HIGH <%BNK_START 2050> = HIGH:{%SER_I}_HIGHA;

{%SER_I}_LR <%BNK_START 2025> = LOW_25:{%SER_I}_LOWA25 / BASE:{%SER_I}_SOLA;
{%SER_I}_LR <2050 2050> = LOW:{%SER_I}_LOWA / BASE:{%SER_I}_SOLA;
{%SER_I}_LR <2026 2026> ^= 0;
{%SER_I}_LR <2027 2049> = M();
SMOOTH {%SER_I}_LR = {%SER_I}_LR SPLINE;
{%SER_I}_LL <%BNK_START 2050> = {%SER_I}_LR * BASE:{%SER_I}_SOLA;

// USE JUST LR INSTEAD
{%SER_I}_LOW <%BNK_START 2050> = LOW:{%SER_I}_LOWA;

// USE JUST LR INSTEAD
// COPY BASE:{%SER_I}_SOLA TO WORK:{%SER_I}_BASE; // UNINTENDED COPY BY REFERENCE?
WORK:{%SER_I}_BASE = BASE:{%SER_I}_SOLA;

END; // END FOR

TELL '*************************';
TELL ' FIGURES, DOC, EXPORT    ';
TELL '*************************';

// LISTS WITH METADATA
#SER_DESC = ('TOTAL VISITOR ARRIVALS (THOUS)', 'TOTAL NONFARM JOBS (THOUS)', 'RESIDENT POPULATION (THOUS)', 'PERSONAL INCOME IN CURRENT DOLLARS ($MIL)', 'PERSONAL INCOME IN 82-84 DOLLARS ($MIL)', 'EARNINGS BY PLACE OF WORK IN CURRENT DOLLARS ($MIL)', 'EARNINGS BY PLACE OF WORK IN 82-84 DOLLARS ($MIL)');
#CNTY_DESC = ('STATE OF HAWAII', 'HONOLULU COUNTY', 'HAWAII COUNTY', 'MAUI COUNTY', 'KAUAI COUNTY');

// EXPLORATORY PLOTS
// FOR STRING %SER_I = #HILO_LIST;
// PLOT <2005 2050> {%SER_I}_LR<TYPE=LINES DASHTYPE='1'>, {%SER_I}_HR<TYPE=LINES DASHTYPE='2'>, PCH({%SER_I}_LR)<TYPE=BOXES Y2>, PCH({%SER_I}_HR)<TYPE=BOXES Y2> FILE='{%WORK_DIR}\FIG\{%SER_I}_RAT.pdf';
// END; // END FOR
// FOR STRING %SER_I = #HILO_LIST;
// PLOT <2005 2050> {%SER_I}_LOW<TYPE=LINES DASHTYPE='1'>, {%SER_I}_HIGH<TYPE=LINES DASHTYPE='2'>, PCH({%SER_I}_LOW)<TYPE=BOXES Y2>, PCH({%SER_I}_HIGH)<TYPE=BOXES Y2> FILE='{%WORK_DIR}\FIG\{%SER_I}_LEV.pdf';
// END; // END FOR
// FOR STRING %SER_I = #HILO_LIST;
// PLOT <2005 2050> {%SER_I}_LOW<TYPE=LINES DASHTYPE='1'>, {%SER_I}_HIGH<TYPE=LINES DASHTYPE='1'>, {%SER_I}_LOWA<TYPE=LINES DASHTYPE='2'>, {%SER_I}_HIGHA<TYPE=LINES DASHTYPE='2'>, {%SER_I}_SOLA<TYPE=LINES DASHTYPE='1'> FILE='{%WORK_DIR}\FIG\{%SER_I}_LEV_COMP.pdf';
// END; // END FOR

// DOCUMENT SERIES AND PLOT SCENARIOS
FOR STRING %SER_I = VIS, E_NF, NR, Y, Y_R, YL, YL_R STRING %SER_DESC_I = #SER_DESC;
FOR STRING %CNTY_I = HI, HON, HAW, MAU, KAU STRING %CNTY_DESC_I = #CNTY_DESC;
DOC {%SER_I}_{%CNTY_I}_LOW label='{%SER_DESC_I}, {%CNTY_DESC_I}, LOW' SOURCE='' UNITS='' STAMP='18-06-2020';
DOC {%SER_I}_{%CNTY_I}_HIGH label='{%SER_DESC_I}, {%CNTY_DESC_I}, HIGH' SOURCE='' UNITS='' STAMP='18-06-2020';
DOC {%SER_I}_{%CNTY_I}_BASE label='{%SER_DESC_I}, {%CNTY_DESC_I}, BASE' SOURCE='' UNITS='' STAMP='18-06-2020';
// PLOT <2005 2050 TITLE=%SER_DESC_I SUBTITLE=%CNTY_DESC_I> {%SER_I}_{%CNTY_I}_LOW<TYPE=LINES DASHTYPE='1'>, {%SER_I}_{%CNTY_I}_HIGH<TYPE=LINES DASHTYPE='1'>, {%SER_I}_{%CNTY_I}_BASE<TYPE=LINES DASHTYPE='1'> FILE='{%WORK_DIR}\FIG\{%SER_I}_{%CNTY_I}_HBL.pdf';
END; // END FOR
END; // END FOR

// CPI IS ONLY AVAILABLE FOR HON
DOC CPI_HON_LOW label='CONSUMER PRICE INDEX (1982-84=100), HONOLULU COUNTY, LOW' SOURCE='' UNITS='' STAMP='18-06-2020';
DOC CPI_HON_HIGH label='CONSUMER PRICE INDEX (1982-84=100), HONOLULU COUNTY, HIGH' SOURCE='' UNITS='' STAMP='18-06-2020';
DOC CPI_HON_BASE label='CONSUMER PRICE INDEX (1982-84=100), HONOLULU COUNTY, BASE' SOURCE='' UNITS='' STAMP='18-06-2020';
// PLOT <2005 2050 TITLE='CONSUMER PRICE INDEX (1982-84=100)' SUBTITLE='HONOLULU COUNTY'> CPI_HON_LOW<TYPE=LINES DASHTYPE='1'>, CPI_HON_HIGH<TYPE=LINES DASHTYPE='1'>, CPI_HON_BASE<TYPE=LINES DASHTYPE='1'> FILE='{%WORK_DIR}\FIG\CPI_HON_HBL.pdf';

// EXPORT TSD FOR FORECAST SNAPSHOT
// EXPORT <2000 2050 TSD> *LOW FILE = LOW.TSD; 
// EXPORT <2000 2050 TSD> *HIGH FILE = HIGH.TSD; 
// EXPORT <2000 2050 TSD> *BASE FILE = BASE.TSD; 

INDEX *_BASE, *_LOW, *_HIGH TO #REB;
REBASE <PREFIX=Y19_> {#REB} 2019;

// COMPARE SCENARIOS FOR ALL COUNTIES
FOR STRING %SCEN_I = LOW, HIGH, BASE;
FOR STRING %SER_I = VIS, E_NF, NR, Y, Y_R, YL, YL_R STRING %SER_DESC_I = #SER_DESC;
PLOT <2005 2050 TITLE=%SER_DESC_I SUBTITLE=%SCEN_I> Y19_{%SER_I}_HI_{%SCEN_I}<TYPE=LINES DASHTYPE='1'>, Y19_{%SER_I}_HON_{%SCEN_I}<TYPE=LINES DASHTYPE='1'>, Y19_{%SER_I}_HAW_{%SCEN_I}<TYPE=LINES DASHTYPE='1'>, Y19_{%SER_I}_MAU_{%SCEN_I}<TYPE=LINES DASHTYPE='1'>, Y19_{%SER_I}_KAU_{%SCEN_I}<TYPE=LINES DASHTYPE='1'> FILE='{%WORK_DIR}\FIG\{%SER_I}_{%SCEN_I}.pdf';
END; // END FOR
END; // END FOR

