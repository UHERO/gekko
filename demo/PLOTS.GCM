//Code corresponding to Gekko 3.0.
//Gekko 3.0.1 had a bug regarding histograms/boxes. This is fixed in version 3.0.6.

reset;

//sys'del g*.svg'; //This can be set to be absolutely sure that all graphs are renewed

fy  <1966 2015> = data('703065.312500  741947.187500  783148.625000  834125.312500  847444.187500  872910.500000  907212.312500  944334.625000  933730.687500  920122.875000  974609.625000  992846.625000  1014946.000000  1054197.000000  1049106.000000  1042115.000000  1080514.000000  1108566.000000  1154749.000000  1200980.000000  1259880.000000  1263022.000000  1262885.000000  1271031.000000  1289783.000000  1307758.000000  1333350.000000  1333492.000000  1404600.000000  1447126.000000  1489094.000000  1537651.000000  1571759.000000  1618095.000000  1678723.000000  1692542.000000  1700435.000000  1707068.000000  1752051.000000  1794749.000000  1862890.000000  1878250.000000  1864764.000000  1769886.000000  1798649.000000  1819372.000000  1818038.000000  1813606.000000  1836492.000000  1858137.000000');
fcp <1966 2015> = data('372931.000000  398027.406250  412323.093750  435884.406250  446699.187500  450446.093750  450675.812500  484777.593750  473785.906250  488673.687500  525940.812500  536374.500000  545648.687500  551279.125000  538944.187500  532174.812500  539668.687500  549990.375000  569334.625000  594892.875000  637307.000000  625175.125000  613717.375000  615669.875000  620600.625000  630670.375000  646849.625000  641281.625000  683979.625000  695462.375000  712536.125000  733525.125000  750780.500000  749881.687500  752781.125000  754500.812500  765410.375000  775622.875000  811667.812500  841652.312500  866428.187500  881689.375000  885821.812500  855286.500000  861834.625000  863870.875000  867057.312500  865902.687500  870343.375000  888901.812500');
fe  <1966 2015> = data('123799.796875  128395.703125  140980.406250  149432.203125  155138.000000  164959.500000  173640.203125  188148.796875  194573.296875  193164.500000  199791.593750  206956.296875  209845.296875  232696.000000  245681.593750  266961.687500  275409.812500  288068.187500  297568.906250  315531.687500  319757.687500  335289.906250  365942.312500  382987.312500  407983.500000  433151.406250  434324.500000  439663.406250  475872.406250  489591.406250  512358.593750  535350.687500  557307.812500  620114.187500  698109.500000  721515.375000  747710.625000  744349.312500  763979.812500  826157.625000  907078.687500  939429.625000  969443.812500  877428.375000  894288.312500  959295.875000  964774.187500  973245.125000  1002932.000000  992516.125000');
fm  <1966 2015> = data('112420.000000  120294.000000  127953.000000  144340.000000  157499.000000  159790.000000  161630.000000  190397.000000  186554.000000  177295.000000  207047.000000  208826.000000  210851.000000  224904.000000  212389.000000  213569.000000  220267.000000  224608.000000  236651.000000  260151.000000  282209.000000  278884.000000  290665.000000  306354.000000  313632.000000  326277.000000  325850.000000  321238.000000  363928.000000  389413.000000  401568.000000  438543.000000  471763.000000  483807.000000  549928.000000  563100.000000  599004.000000  592868.000000  635179.000000  705072.000000  805322.000000  851238.000000  887488.000000  777175.000000  784314.000000  840383.000000  855653.875000  865300.312500  893940.812500  881107.625000');
pcp <1966 2015> = data('0.128196  0.133015  0.139675  0.146597  0.158038  0.169115  0.183662  0.200931  0.231878  0.256488  0.281906  0.308463  0.333203  0.364994  0.402087  0.449804  0.495569  0.528828  0.565429  0.586343  0.591344  0.618027  0.643418  0.674306  0.685698  0.704931  0.713335  0.720926  0.739731  0.753405  0.766043  0.780335  0.792075  0.807059  0.829589  0.849081  0.864796  0.875161  0.885521  0.900513  0.920329  0.936375  0.963606  0.975817  1.000000  1.023650  1.048030  1.056115  1.064561  1.070796');

time 90 2015;

rfy = pch(fy);
rfcp = pch(fcp);
rfe = pch(fe);
rfm = pch(fm);
rpcp = pch(pcp);

%i = 0;

pipe<html>g.html;
  tell'<font face="verdana">';
  tell'<font size="2">';
  tell'<table style="width:100%" cellpadding="20">';
  tell'<tr><td>';
  tell'<p style="font-size:200%;">Gekko PLOT gallery';
  tell'<p>In this gallery, PLOT command options are used. Note however, that all these examples could have been produced by means of xml-based schemas (.gpt files) to style the graphs, cf. the code examples below.';
  tell'<p>The gallery uses .svg files (vector-based). For use in MS Office, .emf files can be used instead, and pdf and other formats are supported, too.';
  tell'<p>The .gcm command file to auto-generate (with Gekko 3.0.6 or above) the present html page including the graphs is <a href="g.gcm">here</a>.';
  tell'<p>Instead of "PLOT &lt;...> x1 &lt...>, x2 &lt...>;", a g.gpt file could store the settings and be called with "PLOT x1, x2 using=g;". The following code shows how to use PLOT options versus a .gpt file. Both produce exactly the same graph (dash type graph, shown later in the examples).';
  tell'</tr></td>';
  tell'</table>';

  tell'<table style="width:500" cellpadding="20">';
  tell'<tr><td>';
  tell'<p><b>Using PLOT options</b>';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=lines linecolor=&#39;blue&#39;> rfy&lt;dashtype=&#39;1&#39;>, rfcp&lt;dashtype=&#39;2&#39;>, rfm&lt;dashtype=&#39;3&#39;>, rfe&lt;dashtype=&#39;4&#39;>;</pre>';
  tell'</td></tr>';
  tell'<tr><td>';
  tell'<p><b>Using .gpt schema file</b>';
  tell'<pre style="white-space: pre-wrap;">';
  tell'plot rfy, rfcp, rfm, rfe using=p;';
  tell'';
  tell'  where p.gpt is the following xml file:';
  tell'';
  tell'&lt;gekkoplot>';
  tell'  &lt;type>lines&lt;/type>';
  tell'  &lt;linecolor>blue&lt;/linecolor>';
  tell'  &lt;lines>';
  tell'    &lt;line>';
  tell'      &lt;dashtype>1&lt;/dashtype>';
  tell'    &lt;/line>';
  tell'    &lt;line>';
  tell'      &lt;dashtype>2&lt;/dashtype>';
  tell'    &lt;/line>';
  tell'    &lt;line>';
  tell'      &lt;dashtype>3&lt;/dashtype>';
  tell'    &lt;/line>';
  tell'    &lt;line>';
  tell'      &lt;dashtype>4&lt;/dashtype>';
  tell'    &lt;/line>';
  tell'  &lt;/lines>';
  tell'&lt;/gekkoplot>';
  tell'</pre>';
  tell'</tr></td>';
  tell'</table>';
  tell'<p>&nbsp;';
  tell'<table style="width:100%;" cellpadding="20">';
  tell'<col width="40%">';
  tell'<col width="60%">';
pipe<pause>;


%i = %i + 1;
plot rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Default plot (percent growth rates of GDP/consumption/imports/exports)';
  tell'<pre style="white-space: pre-wrap;">plot rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<ymirror='3' grid=no xzeroaxis=no key='inside vertical bot left Left reverse'> rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Mirrored y-axis, grid removed, y=0 axis removed, key (legend) put inside the plot.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;ymirror=&#39;3&#39; grid=no xzeroaxis=no key=&#39;inside vertical bot left Left reverse&#39;> rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot <xlineafter=2010 xline=2000 yline=-10 > rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Vertical line at year 2000, and between 2010 and 2011. Horizontal line at y=-10';
  tell'<pre style="white-space: pre-wrap;">plot &lt;xlineafter=2010 xline=2000 yline=-10 > rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot<title='Gekko PLOT' subtitle='With help from gnuplot' ytitle='Percent' ymirror='3'> rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Titles, also on y-axis';
  tell'<pre style="white-space: pre-wrap;">plot &lt;title=&#39;Gekko PLOT&#39; subtitle=&#39;With help from gnuplot&#39; ytitle=&#39;Percent&#39; ymirror=&#39;3&#39;> rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot rfy'GDP', rfcp'Consumption', rfm'Imports (right)'<y2>, rfe'Exports' file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Variable rfm shown at y2-axis (right-hand side). Variable labels altered.';
  tell'<pre style="white-space: pre-wrap;">plot rfy &#39;GDP&#39;, rfcp &#39;Consumption&#39;, rfm &#39;Imports (right)&#39; &lt;y2>, rfe &#39;Exports&#39;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<ymin=-35 ymax=15 y2min=-15 y2max=35 x2zeroaxis> rfy'GDP', rfcp'Consumption', rfm'Imports (right)'<y2>, rfe'Exports' file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Same plot as above, but with y and y2 axis ranges fixed. A y2=0 axis is added. Cf. also the "separate" option in a later example.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;ymin=-35 ymax=15 y2min=-15 y2max=35 x2zeroaxis> rfy &#39;GDP&#39;, rfcp &#39;Consumption&#39;, rfm &#39;Imports (right)&#39; &lt;y2>, rfe &#39;Exports&#39;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<palette='#5B9BD5,#ED7D31,#A5A5A5,#FFC000'> rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Excel color palette instead';
  tell'<pre style="white-space: pre-wrap;">plot &lt;palette=&#39;#5B9BD5,#ED7D31,#A5A5A5,#FFC000&#39;>rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot rfy<linecolor='yellow'>, rfcp<linecolor='orange'>, rfm<linecolor='red'>, rfe<linecolor='gray'> file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Set colors one by one';
  tell'<pre style="white-space: pre-wrap;">plot rfy&lt;linecolor=&#39;yellow&#39;>, rfcp&lt;linecolor=&#39;orange&#39;>, rfm&lt;linecolor=&#39;red&#39;>, rfe&lt;linecolor=&#39;gray&#39;>;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=lines linecolor='blue'> rfy<dashtype='1'>, rfcp<dashtype='2'>, rfm<dashtype='3'>, rfe<dashtype='4'> file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Dash types';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=lines linecolor=&#39;blue&#39;> rfy&lt;dashtype=&#39;1&#39;>, rfcp&lt;dashtype=&#39;2&#39;>, rfm&lt;dashtype=&#39;3&#39;>, rfe&lt;dashtype=&#39;4&#39;>;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=lines> rfy<linewidth=3>, rfcp<linewidth=6>, rfm<linewidth=9>, rfe<linewidth=12> file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Line width';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=lines> rfy&lt;linewidth=3>, rfcp&lt;linewidth=6>, rfm&lt;linewidth=9>, rfe&lt;linewidth=12>;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot rfy<pointsize=0.5>, rfcp<pointsize=0.7>, rfm<pointsize=0.8>, rfe<pointsize=1.1> file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Point size';
  tell'<pre style="white-space: pre-wrap;">plot rfy&lt;pointsize=0.5>, rfcp&lt;pointsize=0.7>, rfm&lt;pointsize=0.8>, rfe&lt;pointsize=1.1>;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot<pointsize=0.8> rfy<pointtype='1'>, rfcp<pointtype='2'>, rfm<pointtype='3'>, rfe<pointtype='4'> file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Point type';
  tell'<pre style="white-space: pre-wrap;">plot &lt;pointsize=0.8> rfy&lt;pointtype=&#39;1&#39;>, rfcp&lt;pointtype=&#39;2&#39;>, rfm&lt;pointtype=&#39;3&#39;>, rfe&lt;pointtype=&#39;4&#39;>;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<2001 2014 type=boxes> rfy file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Boxes type (bar/histogram)';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes> rfy;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<2001 2014 type=boxes fillstyle='empty'> rfy file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>No fill (empty boxes)';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes fillstyle=&#39;empty&#39;> rfy;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<2001 2014 type=boxes fillstyle='pattern 5'> rfy file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>A pattern';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes fillstyle=&#39;pattern 5&#39;> rfy;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot<2001 2014 type=boxes boxwidth=0.375> rfy file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Narrower box width';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes boxwidth=0.375> rfy;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<2001 2014 type=boxes> rfy, rfcp file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Grouped boxes. The gap between the groups can be set if needed (boxgap).';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes> rfy, rfcp;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=boxes stack> rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Stacked boxes';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=boxes stack> rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<2001 2014 type=boxes stack ymax=100> 100*fy/(fy+fcp+fm+fe), 100*fcp/(fy+fcp+fm+fe), 100*fm/(fy+fcp+fm+fe), 100*fe/(fy+fcp+fm+fe) file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Stacked boxes, 100%. Here it is done manually, later on this will be a feature.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes stack ymax=100> 100*fy/(fy+fcp+fm+fe), 100*fcp/(fy+fcp+fm+fe), 100*fm/(fy+fcp+fm+fe), 100*fe/(fy+fcp+fm+fe);</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot<2001 2014 type=boxes stack> rfy<fillstyle='pattern 1'>, rfcp<fillstyle='pattern 5'>, rfm<fillstyle='pattern 6'>, rfe<fillstyle='pattern 4'> file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Stacked boxes, with patterns. The .svg filetype used here overlaps the boxes: this is not so regarding the .emf or .png terminals. This problem will be addressed.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;2001 2014 type=boxes stack> rfy&lt;fillstyle=&#39;pattern 1&#39;>, rfcp&lt;fillstyle=&#39;pattern 5&#39;>, rfm&lt;fillstyle=&#39;pattern 6&#39;>, rfe&lt;fillstyle=&#39;pattern 4&#39;>;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot rfy<type=boxes>, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Boxes and lines combined';
  tell'<pre style="white-space: pre-wrap;">plot rfy&lt;type=boxes>, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot <separate> rfy<type=boxes>, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>A special Gekko PLOT type: "separated". This type auto-calculates the y and y2 axis ranges, so that the boxes and lines are separated (below and above), where the boxes occupy around 25% of the vertical space. This <separate> option is very handy for residual plots, that is, observed/predicted/residuals';
  tell'<pre style="white-space: pre-wrap;">plot &lt;separate> rfy&lt;type=boxes>, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=filledcurves stack> rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Area curves, stacked';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=filledcurves stack> rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot<type=filledcurves stack ymax=100> 100*fy/(fy+fcp+fm+fe), 100*fcp/(fy+fcp+fm+fe), 100*fm/(fy+fcp+fm+fe), 100*fe/(fy+fcp+fm+fe) file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Area curves, stacked 100%. Here it is done manually, later on this will be a feature';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=filledcurves stack ymax=100> 100*fy/(fy+fcp+fm+fe), 100*fcp/(fy+fcp+fm+fe), 100*fm/(fy+fcp+fm+fe), 100*fe/(fy+fcp+fm+fe);</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=steps> rfy file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Steps';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=steps> rfy;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=points> rfy, rfcp, rfm, rfe file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Points';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=points> rfy, rfcp, rfm, rfe;</pre>';
  tell'</td>';
  tell'</tr>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot<type=impulses> rfy file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Impulses';
  tell'<pre style="white-space: pre-wrap;">plot &lt;type=impulses> rfy;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot <linecolor='blue' ymaxhard = 4 ymaxsoft=2> 1.0*rpcp file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Factor 1.0, ymaxhard = 4, ymaxsoft = 2';
  tell'<p>The following graphs are examples regarding the use of ymax (there is a similar ymin) in the "hard" and "soft" variants. By using these, a lot of manual finetuning can be avoided when producing batches of similar graphs';
  tell'<p>The graph here is not affected by the range settings (ymaxhard = 4 and ymaxsoft = 2).';
  tell'<pre style="white-space: pre-wrap;">plot &lt;linecolor=&#39;blue&#39; ymaxhard = 4 ymaxsoft=2> 1.0*rpcp;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot <linecolor='blue' ymaxhard = 4 ymaxsoft=2> 1.5*rpcp file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Factor 1.5, ymaxhard = 4, ymaxsoft = 2';
  tell'<p>Data is multiplied with 1.5, some data points above 4 are cut off.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;linecolor=&#39;blue&#39; ymaxhard = 4 ymaxsoft=2> 1.5*rpcp;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot <linecolor='blue' ymaxhard = 4 ymaxsoft=2> 2.0*rpcp file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Factor 2.0, ymaxhard = 4, ymaxsoft = 2';
  tell'<p>Data is multiplied with 2.0, more data points are cut off.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;linecolor=&#39;blue&#39; ymaxhard = 4 ymaxsoft=2> 2.0*rpcp;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

%i = %i + 1;
plot <linecolor='blue' ymaxhard = 4 ymaxsoft=2> 0.5*rpcp file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Factor 0.5, ymaxhard = 4, ymaxsoft = 2';
  tell'<p>Now, data is multiplied with 0.5, note that the y range has a max of 2, even though the data is scaled down. So ymaxsoft will avoid zooming in too much, if the data values become small.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;linecolor=&#39;blue&#39; ymaxhard = 4 ymaxsoft=2> 0.5*rpcp;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;


%i = %i + 1;
plot <linecolor='blue' ymaxhard = 4 ymaxsoft=2> 0.25*rpcp file=g{%i}.svg;
pipe<continue>;
  tell'<tr style="page-break-inside:avoid; page-break-after:auto"><td><img src="g{%i}.svg" width="100%"></td>';
  tell'<td valign="top">';
  tell'<p>Factor 0.25, ymaxhard = 4, ymaxsoft = 2';
  tell'<p>The graph keeps the  y range max of 2.';
  tell'<p>To sum up, ymaxhard and yminhard are good for filtering out outliers that the user does not want to be shown.';
  tell'<p>Whereas ymaxsoft and yminsoft are good for keeping a sensible span of the graph, even if the data values become small. Another way of describing it is that zooming in too much on small data values is avoided, so that graphs with different data values are easier to compare.';
  tell'<pre style="white-space: pre-wrap;">plot &lt;linecolor=&#39;blue&#39; ymaxhard = 4 ymaxsoft=2> 0.25*rpcp;</pre>';
  tell'</td>';
  tell'</tr>';
pipe<pause>;

pipe<continue>;
  tell'</table>';
pipe<stop>;

sys'g.html';