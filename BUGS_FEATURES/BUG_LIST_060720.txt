// SET UP EXAMPLE WITH SOME DATA
RESTART;
OPTION FREQ=A;
TIME 2016 2060;

NCEN_US_SOLA = 323127513,325511184,327891911,330268840,332639102,334998398,337341954,339665118,341963408,344234377,346481182,348695115,350872007,353008224,355100730,357147329,359146709,361098559,363003410,364862145,366676312,368447857,370178704,371871238,373527973,375151805,376746115,378314343,379860859,381390297,382907447,384415207,385917628,387418788,388922201,390430803,391947055,393472783,395009307,396557404,398117875,399690963,401276590,402874337,404483055; 			
NCEN_US_SOLA /= 1000; 	// SCALE BY 1000

INTERPOLATE NCEN_US_SOLA!Q = NCEN_US_SOLA!A; // ERROR DUE TO MISSING METHOD
INTERPOLATE NCEN_US_SOLA!Q = NCEN_US_SOLA!A REPEAT; // THIS WORKS

NCEN_US_SOLA1 = NCEN_US_SOLA;
NCEN_US_SOLA1 <2020 2021> = M();

SMOOTH <2015 2025> NCEN_US_SOLA2 = NCEN_US_SOLA1 REPEAT; // ERROR DUE TO PERIOD BRACKET?
SMOOTH NCEN_US_SOLA2 = NCEN_US_SOLA1 REPEAT; // THIS WORKS

PRT NCEN_US_SOLA, NCEN_US_SOLA1, NCEN_US_SOLA2;

// DEFINE A LINEAR INTERPOLATION FUNCTION BASED ON AREMOS COMMAND REFERENCE PAGE 292
FUNCTION SERIES INTERP_QA_LIN(SERIES Y); 
	BLOCK FREQ=Q;
		INTERPOLATE X!Q = Y!A REPEAT;
		%DAT_STRT = FROMSERIES(X, 'DATASTART');
		%DAT_END = FROMSERIES(X, 'DATAEND');
		INCREMENT = (X[+4] - X)/4;
		//INCREMENT = IIF(INCREMENT, '==', M(), INCREMENT[-4], INCREMENT);
		INCREMENT <%DAT_END-3 %DAT_END> = INCREMENT[-4];
		X <%DAT_STRT+1 %DAT_END> ^= INCREMENT[-1];
		X <%DAT_STRT %DAT_END> -= 1.5*INCREMENT;
	END;
 	RETURN X!Q;
END;
TEST = INTERP_QA_LIN(NCEN_US_SOLA); // THE FUNCTION FAILS DUE TO SOME INTERNAL ERROR IN THE INTERPOLATION COMMAND (LINE 3)

// TRY STEPPING INTO THE FUNCTION TO FIND LINE WITH ERROR
OPTION FREQ=A;
Y = NCEN_US_SOLA;
	BLOCK FREQ=Q;
		INTERPOLATE X!Q = Y!A REPEAT;
		%DAT_STRT = FROMSERIES(X, 'DATASTART');
		%DAT_END = FROMSERIES(X, 'DATAEND');
		INCREMENT = (X[+4] - X)/4;
		INCREMENT = IIF(INCREMENT, '==', M(), INCREMENT[-4], INCREMENT); // THIS LINE THROWS AN ERROR
		X <%DAT_STRT+1 %DAT_END> ^= INCREMENT[-1];
		X <%DAT_STRT %DAT_END> -= 1.5*INCREMENT;
	END;

// TRY A DIFFERENT SOLUTION FOR THE END OF THE SAMPLE
OPTION FREQ=A;
Y = NCEN_US_SOLA;
	BLOCK FREQ=Q;
		INTERPOLATE X!Q = Y!A REPEAT; // FOR STOCK TYPE VARIABLES REPEAT, FOR FLOW TYPE VARIABLES PRORATE
		%DAT_STRT = FROMSERIES(X, 'DATASTART');
		%DAT_END = FROMSERIES(X, 'DATAEND');
		INCREMENT = (X[+4] - X)/4;
		INCREMENT <%DAT_END-3 %DAT_END> = INCREMENT[-4];
		X <%DAT_STRT+1 %DAT_END> ^= INCREMENT[-1];
		X <%DAT_STRT %DAT_END> -= 1.5*INCREMENT;
	END;

PRT X!Q;
COLLAPSE X!A = X!Q AVG; // FOR STOCK TYPE VARIABLES AVG, FOR FLOW TYPE VARIABLES TOTAL
PRT X!Q, NCEN_US_SOLA!A, X!A; // THE LAST ATTEMPT WORKS!


// SOLUTIONS FROM THOMAS:

// SET UP EXAMPLE WITH SOME DATA
RESTART;
OPTION FREQ=A;
TIME 2016 2060;

NCEN_US_SOLA = 323127513,325511184,327891911,330268840,332639102,334998398,337341954,339665118,341963408,344234377,346481182,348695115,350872007,353008224,355100730,357147329,359146709,361098559,363003410,364862145,366676312,368447857,370178704,371871238,373527973,375151805,376746115,378314343,379860859,381390297,382907447,384415207,385917628,387418788,388922201,390430803,391947055,393472783,395009307,396557404,398117875,399690963,401276590,402874337,404483055;
NCEN_US_SOLA /= 1000;   // SCALE BY 1000

//INTERPOLATE NCEN_US_SOLA!Q = NCEN_US_SOLA!A; // ERROR DUE TO MISSING METHOD. TT: FIXED
INTERPOLATE NCEN_US_SOLA!Q = NCEN_US_SOLA!A REPEAT; // THIS WORKS

NCEN_US_SOLA1 = NCEN_US_SOLA;
NCEN_US_SOLA1 <2020 2021> = M();

//SMOOTH <2015 2025> NCEN_US_SOLA2 = NCEN_US_SOLA1 REPEAT; // ERROR DUE TO PERIOD BRACKET? TT: YES
SMOOTH NCEN_US_SOLA2 = NCEN_US_SOLA1 REPEAT; // THIS WORKS

PRT NCEN_US_SOLA, NCEN_US_SOLA1, NCEN_US_SOLA2;

// DEFINE A LINEAR INTERPOLATION FUNCTION BASED ON AREMOS COMMAND REFERENCE PAGE 292
FUNCTION SERIES INTERP_QA_LIN(NAME %Y);
        LOCAL X, %DAT_STRT, %DAT_END, INCREMENT;  //TT: TO AVOID POLLUTION OF DATABANK
        BLOCK FREQ=Q;
                INTERPOLATE X!Q = {%Y}!A REPEAT;
                %DAT_STRT = FROMSERIES(X, 'DATASTART');
                %DAT_END = FROMSERIES(X, 'DATAEND');
                INCREMENT = (X[+4] - X)/4;
                INCREMENT = IIF(INCREMENT, '==', M(), INCREMENT[-4], INCREMENT);
                INCREMENT <%DAT_END-3 %DAT_END> = INCREMENT[-4];
                X <%DAT_STRT+1 %DAT_END> ^= INCREMENT[-1];
                X <%DAT_STRT %DAT_END> -= 1.5*INCREMENT;
        END;
        RETURN X!Q;
END;
TEST!Q = INTERP_QA_LIN(NCEN_US_SOLA);
COLLAPSE X!A = TEST!Q AVG; // FOR STOCK TYPE VARIABLES AVG, FOR FLOW TYPE VARIABLES TOTAL
PRT TEST!Q, NCEN_US_SOLA!A, X!A;

Comments:
INTERPOLATE: fixed the error regarding default argument
SMOOTH does not allow <...> time period, I fixed the documentation. The command actually runs on the whole series regardless of time settings. To time-truncate, y <%t1 %t2> = x; can always be used afterwards.
For the function, I suggest you use the NAME type as input, instead of SERIES. So FUNCTION SERIES INTERP_QA_LIN(NAME %y), and then you can use {%y} to reference your timeseries (%y is actually a normal string inside the body of the function). Where AREMOS uses the pattern x|#i, Gekko uses x{%i}. The reason why SERIES as input type fails here is a bit technical, but it has to do with the fact that the INTERPOLATE command expects a name (and not an object or an expression) on the right-hand side. Using NAME instead of STRING as type allows you to call with INTERP_QA_LIN(NCEN_US_SOLA) instead of INTERP_QA_LIN('NCEN_US_SOLA').
The linked Gekko version fixes another thing, namely the fact that BLOCK freq = q; should also change the global time period (into a quarterly time period, 'translatring' from the global annual period). This is done when issuing an OPTION freq = q;, I just forgot about doing the same for BLOCK.
The help files have been updated.
